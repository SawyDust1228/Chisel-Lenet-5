;buildInfoPackage: chisel3, version: 3.1.2, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2018-07-25 16:52:17.431, builtAtMillis: 1532537537431
circuit ConvFSM : 
  module ConvFSM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {output : UInt<1>, finish : UInt<1>, outState : UInt<32>, outCounter : UInt<32>}
    
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ConvFSM.scala 15:22]
    reg count : UInt<32>, clock with : (reset => (reset, UInt<32>("h01"))) @[ConvFSM.scala 16:22]
    reg computeCounter : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ConvFSM.scala 17:31]
    reg dontComputeCounter : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ConvFSM.scala 18:35]
    reg rowComputeCounter : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ConvFSM.scala 19:34]
    node _T_22 = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T_22 : @[Conditional.scala 40:58]
      node _T_25 = sub(UInt<2>("h03"), UInt<1>("h01")) @[ConvFSM.scala 23:37]
      node _T_26 = asUInt(_T_25) @[ConvFSM.scala 23:37]
      node _T_27 = tail(_T_26, 1) @[ConvFSM.scala 23:37]
      node _T_28 = eq(count, _T_27) @[ConvFSM.scala 23:18]
      when _T_28 : @[ConvFSM.scala 23:44]
        state <= UInt<2>("h01") @[ConvFSM.scala 24:15]
        computeCounter <= UInt<1>("h01") @[ConvFSM.scala 25:24]
        skip @[ConvFSM.scala 23:44]
      else : @[ConvFSM.scala 26:19]
        node _T_31 = add(count, UInt<1>("h01")) @[ConvFSM.scala 27:24]
        node _T_32 = tail(_T_31, 1) @[ConvFSM.scala 27:24]
        count <= _T_32 @[ConvFSM.scala 27:15]
        skip @[ConvFSM.scala 26:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_33 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_33 : @[Conditional.scala 39:67]
        node _T_36 = sub(UInt<10>("h0309"), UInt<2>("h03")) @[ConvFSM.scala 31:49]
        node _T_37 = asUInt(_T_36) @[ConvFSM.scala 31:49]
        node _T_38 = tail(_T_37, 1) @[ConvFSM.scala 31:49]
        node _T_40 = add(_T_38, UInt<1>("h01")) @[ConvFSM.scala 31:66]
        node _T_41 = tail(_T_40, 1) @[ConvFSM.scala 31:66]
        node _T_42 = eq(computeCounter, _T_41) @[ConvFSM.scala 31:27]
        when _T_42 : @[ConvFSM.scala 31:73]
          state <= UInt<2>("h02") @[ConvFSM.scala 32:15]
          dontComputeCounter <= UInt<1>("h01") @[ConvFSM.scala 33:28]
          node _T_45 = add(rowComputeCounter, UInt<1>("h01")) @[ConvFSM.scala 34:48]
          node _T_46 = tail(_T_45, 1) @[ConvFSM.scala 34:48]
          rowComputeCounter <= _T_46 @[ConvFSM.scala 34:27]
          skip @[ConvFSM.scala 31:73]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_47 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_47 : @[Conditional.scala 39:67]
          node _T_50 = sub(UInt<2>("h03"), UInt<1>("h01")) @[ConvFSM.scala 38:51]
          node _T_51 = asUInt(_T_50) @[ConvFSM.scala 38:51]
          node _T_52 = tail(_T_51, 1) @[ConvFSM.scala 38:51]
          node _T_53 = eq(dontComputeCounter, _T_52) @[ConvFSM.scala 38:32]
          node _T_56 = sub(UInt<10>("h0309"), UInt<2>("h03")) @[ConvFSM.scala 39:51]
          node _T_57 = asUInt(_T_56) @[ConvFSM.scala 39:51]
          node _T_58 = tail(_T_57, 1) @[ConvFSM.scala 39:51]
          node _T_60 = add(_T_58, UInt<1>("h01")) @[ConvFSM.scala 39:65]
          node _T_61 = tail(_T_60, 1) @[ConvFSM.scala 39:65]
          node _T_62 = eq(rowComputeCounter, _T_61) @[ConvFSM.scala 39:32]
          node _T_64 = eq(_T_62, UInt<1>("h00")) @[ConvFSM.scala 39:12]
          node _T_65 = and(_T_53, _T_64) @[ConvFSM.scala 39:9]
          when _T_65 : @[ConvFSM.scala 39:73]
            state <= UInt<2>("h01") @[ConvFSM.scala 40:15]
            computeCounter <= UInt<1>("h01") @[ConvFSM.scala 41:24]
            skip @[ConvFSM.scala 39:73]
          else : @[ConvFSM.scala 42:78]
            node _T_69 = sub(UInt<10>("h0309"), UInt<2>("h03")) @[ConvFSM.scala 42:56]
            node _T_70 = asUInt(_T_69) @[ConvFSM.scala 42:56]
            node _T_71 = tail(_T_70, 1) @[ConvFSM.scala 42:56]
            node _T_73 = add(_T_71, UInt<1>("h01")) @[ConvFSM.scala 42:70]
            node _T_74 = tail(_T_73, 1) @[ConvFSM.scala 42:70]
            node _T_75 = eq(rowComputeCounter, _T_74) @[ConvFSM.scala 42:37]
            when _T_75 : @[ConvFSM.scala 42:78]
              state <= UInt<2>("h03") @[ConvFSM.scala 43:15]
              skip @[ConvFSM.scala 42:78]
          skip @[Conditional.scala 39:67]
    node _T_76 = eq(state, UInt<2>("h00")) @[ConvFSM.scala 47:15]
    when _T_76 : @[ConvFSM.scala 47:28]
      io.finish <= UInt<1>("h00") @[ConvFSM.scala 48:15]
      io.output <= UInt<1>("h00") @[ConvFSM.scala 49:15]
      io.outState <= UInt<1>("h00") @[ConvFSM.scala 50:17]
      skip @[ConvFSM.scala 47:28]
    else : @[ConvFSM.scala 51:37]
      node _T_80 = eq(state, UInt<2>("h01")) @[ConvFSM.scala 51:21]
      when _T_80 : @[ConvFSM.scala 51:37]
        node _T_82 = add(computeCounter, UInt<1>("h01")) @[ConvFSM.scala 52:38]
        node _T_83 = tail(_T_82, 1) @[ConvFSM.scala 52:38]
        computeCounter <= _T_83 @[ConvFSM.scala 52:20]
        io.finish <= UInt<1>("h00") @[ConvFSM.scala 53:15]
        io.output <= UInt<1>("h01") @[ConvFSM.scala 54:15]
        io.outState <= UInt<1>("h01") @[ConvFSM.scala 55:17]
        skip @[ConvFSM.scala 51:37]
      else : @[ConvFSM.scala 56:39]
        node _T_87 = eq(state, UInt<2>("h02")) @[ConvFSM.scala 56:21]
        when _T_87 : @[ConvFSM.scala 56:39]
          node _T_89 = add(dontComputeCounter, UInt<1>("h01")) @[ConvFSM.scala 57:46]
          node _T_90 = tail(_T_89, 1) @[ConvFSM.scala 57:46]
          dontComputeCounter <= _T_90 @[ConvFSM.scala 57:24]
          io.finish <= UInt<1>("h00") @[ConvFSM.scala 58:15]
          io.output <= UInt<1>("h00") @[ConvFSM.scala 59:15]
          io.outState <= UInt<2>("h02") @[ConvFSM.scala 60:17]
          skip @[ConvFSM.scala 56:39]
        else : @[ConvFSM.scala 61:15]
          io.finish <= UInt<1>("h01") @[ConvFSM.scala 62:15]
          io.output <= UInt<1>("h00") @[ConvFSM.scala 63:15]
          io.outState <= UInt<2>("h03") @[ConvFSM.scala 64:17]
          skip @[ConvFSM.scala 61:15]
    io.outCounter <= count @[ConvFSM.scala 67:17]
    
